{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Flashcard from \"../code/flashcards\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LibrariesScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState('added'),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedFilter = _useState2[0],\n    setSelectedFilter = _useState2[1];\n  var filteredDecks = decks.filter(function (deck) {\n    return deck[selectedFilter] === 'yes';\n  });\n  var handleFilterClick = function handleFilterClick(filterName) {\n    setSelectedFilter(filterName);\n  };\n  return _jsx(ImageBackground, {\n    source: require(\"../assets/JungleBg.gif\"),\n    style: styles.backgroundImage,\n    children: _jsxs(ScrollView, {\n      contentContainerStyle: styles.scrollContainer,\n      children: [_jsx(View, {\n        children: _jsx(View, {\n          style: styles.container,\n          children: _jsxs(View, {\n            style: styles.buttonContainer,\n            children: [_jsx(TouchableOpacity, {\n              style: [styles.button, selectedFilter === 'added' && styles.selectedButton],\n              onPress: function onPress() {\n                return handleFilterClick('added');\n              },\n              children: _jsx(Text, {\n                style: styles.buttonText,\n                children: \"Added\"\n              })\n            }), _jsx(TouchableOpacity, {\n              style: [styles.button, selectedFilter === 'created' && styles.selectedButton],\n              onPress: function onPress() {\n                return handleFilterClick('created');\n              },\n              children: _jsx(Text, {\n                style: styles.buttonText,\n                children: \"Created\"\n              })\n            }), _jsx(TouchableOpacity, {\n              style: [styles.button, selectedFilter === 'favorite' && styles.selectedButton],\n              onPress: function onPress() {\n                return handleFilterClick('favorite');\n              },\n              children: _jsx(Text, {\n                style: styles.buttonText,\n                children: \"Favorite\"\n              })\n            })]\n          })\n        })\n      }), _jsx(FlatList, {\n        data: filteredDecks,\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        },\n        renderItem: function renderItem(_ref2) {\n          var item = _ref2.item;\n          return _jsx(View, {\n            children: _jsx(Text, {\n              children: item.name\n            })\n          });\n        }\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  backgroundImage: {\n    flex: 1,\n    resizeMode: 'cover',\n    justifyContent: 'center'\n  },\n  scrollContainer: {\n    flexGrow: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  container: {\n    flex: 1,\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    padding: 10\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    marginTop: 10\n  },\n  button: {\n    backgroundColor: '#ECE3CE',\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n    borderRadius: 5,\n    margin: 10,\n    marginHorizontal: 8,\n    top: -350\n  },\n  buttonText: {\n    fontSize: 16,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"names":["React","FlatList","ImageBackground","ScrollView","StyleSheet","Text","TextInput","TouchableOpacity","View","Flashcard","jsx","_jsx","jsxs","_jsxs","LibrariesScreen","_ref","navigation","_useState","useState","_useState2","_slicedToArray","selectedFilter","setSelectedFilter","filteredDecks","decks","filter","deck","handleFilterClick","filterName","source","require","style","styles","backgroundImage","children","contentContainerStyle","scrollContainer","container","buttonContainer","button","selectedButton","onPress","buttonText","data","keyExtractor","item","id","renderItem","_ref2","name","create","flex","resizeMode","justifyContent","flexGrow","backgroundColor","alignItems","padding","flexDirection","marginTop","paddingVertical","paddingHorizontal","borderRadius","margin","marginHorizontal","top","fontSize","fontWeight"],"sources":["C:/Users/Mark/learningrn/navigation/screens/LibrariesScreen.js"],"sourcesContent":["import * as React from 'react';\r\nimport { FlatList, ImageBackground, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\nimport Flashcard from '../code/flashcards';\r\n\r\nexport default function LibrariesScreen({ navigation }) {\r\n\r\n    const [selectedFilter, setSelectedFilter] = useState('added');\r\n  const filteredDecks = decks.filter((deck) => deck[selectedFilter] === 'yes');\r\n\r\n  const handleFilterClick = (filterName) => {\r\n    setSelectedFilter(filterName);\r\n  };\r\n\r\n  return (\r\n    <ImageBackground\r\n      source={require('../assets/JungleBg.gif')}\r\n      style={styles.backgroundImage}\r\n    >\r\n      <ScrollView contentContainerStyle={styles.scrollContainer}>\r\n        <View>\r\n          <View style={styles.container}>\r\n            <View style={styles.buttonContainer}>\r\n              <TouchableOpacity\r\n                style={[\r\n                  styles.button,\r\n                  selectedFilter === 'added' && styles.selectedButton,\r\n                ]}\r\n                onPress={() => handleFilterClick('added')}\r\n              >\r\n                <Text style={styles.buttonText}>Added</Text>\r\n              </TouchableOpacity>\r\n\r\n              <TouchableOpacity\r\n                style={[\r\n                  styles.button,\r\n                  selectedFilter === 'created' && styles.selectedButton,\r\n                ]}\r\n                onPress={() => handleFilterClick('created')}\r\n              >\r\n                <Text style={styles.buttonText}>Created</Text>\r\n              </TouchableOpacity>\r\n\r\n              <TouchableOpacity\r\n                style={[\r\n                  styles.button,\r\n                  selectedFilter === 'favorite' && styles.selectedButton,\r\n                ]}\r\n                onPress={() => handleFilterClick('favorite')}\r\n              >\r\n                <Text style={styles.buttonText}>Favorite</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n        </View>\r\n\r\n        {/* Display filtered decks */}\r\n        <FlatList\r\n          data={filteredDecks}\r\n          keyExtractor={(item) => item.id}\r\n          renderItem={({ item }) => (\r\n            <View>\r\n              {/* Display deck information here */}\r\n              <Text>{item.name}</Text>\r\n            </View>\r\n          )}\r\n        />\r\n      </ScrollView>\r\n    </ImageBackground>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    backgroundImage:{\r\n        flex: 1,\r\n        resizeMode: 'cover', // or 'stretch' or 'contain'\r\n        justifyContent: 'center',\r\n    },\r\n    scrollContainer:{\r\n        flexGrow: 1,\r\n        backgroundColor: 'rgba(0, 0, 0, 0)', // Set the background color to transparent\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'flex-start',\r\n        justifyContent: 'flex-start',\r\n        padding: 10,\r\n    },\r\n    buttonContainer: {\r\n        flexDirection: 'row',\r\n        marginTop: 10, \r\n    },\r\n    button: {\r\n        backgroundColor: '#ECE3CE',\r\n        paddingVertical: 15,\r\n        paddingHorizontal: 30,\r\n        borderRadius: 5,\r\n        margin: 10,\r\n        marginHorizontal: 8,\r\n        top: -350,\r\n    },\r\n    buttonText: {\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n    },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}