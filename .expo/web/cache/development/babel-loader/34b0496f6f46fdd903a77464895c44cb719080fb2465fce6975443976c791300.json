{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { decks } from \"../code/data\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Search(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    searchText = _useState2[0],\n    setSearchText = _useState2[1];\n  var _useState3 = useState(decks),\n    _useState4 = _slicedToArray(_useState3, 2),\n    filteredDecks = _useState4[0],\n    setFilteredDecks = _useState4[1];\n  var handleClear = function handleClear() {\n    setSearchText('');\n    setFilteredDecks(decks);\n  };\n  var handleSearch = function handleSearch() {\n    var filtered = decks.filter(function (deck) {\n      return deck.name.toLowerCase().includes(searchText.toLowerCase()) || deck.course.toLowerCase().includes(searchText.toLowerCase()) || deck.school.toLowerCase().includes(searchText.toLowerCase());\n    });\n    setFilteredDecks(filtered);\n  };\n  return _jsxs(ImageBackground, {\n    source: require(\"../assets/JungleBg.gif\"),\n    style: styles.SearchContainer,\n    children: [_jsxs(View, {\n      style: styles.SearchBar,\n      children: [_jsx(Icon, {\n        name: \"search-outline\",\n        style: styles.searchIcon\n      }), _jsx(TextInput, {\n        style: {\n          flex: 1,\n          margin: 10,\n          marginLeft: 5,\n          fontSize: 16\n        },\n        placeholder: \"Search\",\n        value: searchText,\n        onChangeText: function onChangeText(text) {\n          return setSearchText(text);\n        },\n        onSubmitEditing: handleSearch\n      }), searchText ? _jsx(TouchableOpacity, {\n        onPress: handleClear,\n        style: styles.closeIconContainer,\n        children: _jsx(Icon, {\n          name: \"close-outline\",\n          style: styles.closeIcon\n        })\n      }) : null]\n    }), _jsx(ScrollView, {\n      children: filteredDecks.map(function (deck) {\n        return _jsx(View, {\n          children: _jsx(Text, {\n            children: deck.name\n          })\n        }, deck.id);\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","ImageBackground","ScrollView","StyleSheet","Text","TextInput","TouchableOpacity","View","Icon","decks","jsx","_jsx","jsxs","_jsxs","Search","_ref","navigation","_useState","_useState2","_slicedToArray","searchText","setSearchText","_useState3","_useState4","filteredDecks","setFilteredDecks","handleClear","handleSearch","filtered","filter","deck","name","toLowerCase","includes","course","school","source","require","style","styles","SearchContainer","children","SearchBar","searchIcon","flex","margin","marginLeft","fontSize","placeholder","value","onChangeText","text","onSubmitEditing","onPress","closeIconContainer","closeIcon","map","id"],"sources":["C:/Users/Mark/learningrn/navigation/screens/SearchScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ImageBackground, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\nimport Icon from 'react-native-vector-icons/Ionicons';\r\n\r\n// Assuming your decks data is available here\r\nimport { decks } from '../code/data';\r\n\r\nexport default function Search({ navigation }) {\r\n  const [searchText, setSearchText] = useState('');\r\n  const [filteredDecks, setFilteredDecks] = useState(decks);\r\n\r\n  const handleClear = () => {\r\n    setSearchText('');\r\n    setFilteredDecks(decks); // Reset to the original decks when the search text is cleared\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    const filtered = decks.filter(deck => {\r\n      // Modify the conditions based on your search criteria\r\n      return (\r\n        deck.name.toLowerCase().includes(searchText.toLowerCase()) ||\r\n        deck.course.toLowerCase().includes(searchText.toLowerCase()) ||\r\n        deck.school.toLowerCase().includes(searchText.toLowerCase())\r\n      );\r\n    });\r\n\r\n    setFilteredDecks(filtered);\r\n  };\r\n\r\n  return (\r\n    <ImageBackground source={require('../assets/JungleBg.gif')} style={styles.SearchContainer}>\r\n      <View style={styles.SearchBar}>\r\n        <Icon name='search-outline' style={styles.searchIcon} />\r\n        <TextInput\r\n          style={{ flex: 1, margin: 10, marginLeft: 5, fontSize: 16 }}\r\n          placeholder='Search'\r\n          value={searchText}\r\n          onChangeText={(text) => setSearchText(text)}\r\n          onSubmitEditing={handleSearch}\r\n        />\r\n        {searchText ? (\r\n          <TouchableOpacity onPress={handleClear} style={styles.closeIconContainer}>\r\n            <Icon name='close-outline' style={styles.closeIcon} />\r\n          </TouchableOpacity>\r\n        ) : null}\r\n      </View>\r\n      <ScrollView>\r\n        {filteredDecks.map(deck => (\r\n          // Render your filtered deck items here\r\n          <View key={deck.id}>\r\n            <Text>{deck.name}</Text>\r\n            {/* Add other details you want to display */}\r\n          </View>\r\n        ))}\r\n      </ScrollView>\r\n    </ImageBackground>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}